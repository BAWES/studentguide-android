package com.techno.studentguide.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VENDOR_AREA_LIST.
*/
public class VendorAreaListDao extends AbstractDao<VendorAreaList, Long> {

    public static final String TABLENAME = "VENDOR_AREA_LIST";

    /**
     * Properties of entity VendorAreaList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area_id = new Property(1, String.class, "area_id", false, "AREA_ID");
        public final static Property Area_name_en = new Property(2, String.class, "area_name_en", false, "AREA_NAME_EN");
        public final static Property Area_name_ar = new Property(3, String.class, "area_name_ar", false, "AREA_NAME_AR");
    };


    public VendorAreaListDao(DaoConfig config) {
        super(config);
    }
    
    public VendorAreaListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VENDOR_AREA_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AREA_ID' TEXT," + // 1: area_id
                "'AREA_NAME_EN' TEXT," + // 2: area_name_en
                "'AREA_NAME_AR' TEXT);"); // 3: area_name_ar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VENDOR_AREA_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VendorAreaList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindString(2, area_id);
        }
 
        String area_name_en = entity.getArea_name_en();
        if (area_name_en != null) {
            stmt.bindString(3, area_name_en);
        }
 
        String area_name_ar = entity.getArea_name_ar();
        if (area_name_ar != null) {
            stmt.bindString(4, area_name_ar);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VendorAreaList readEntity(Cursor cursor, int offset) {
        VendorAreaList entity = new VendorAreaList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area_name_en
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // area_name_ar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VendorAreaList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArea_name_en(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArea_name_ar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VendorAreaList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VendorAreaList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
