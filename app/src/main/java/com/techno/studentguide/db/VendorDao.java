package com.techno.studentguide.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VENDOR.
*/
public class VendorDao extends AbstractDao<Vendor, Long> {

    public static final String TABLENAME = "VENDOR";

    /**
     * Properties of entity Vendor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Vendor_id = new Property(1, String.class, "vendor_id", false, "VENDOR_ID");
        public final static Property Vendor_logo = new Property(2, String.class, "vendor_logo", false, "VENDOR_LOGO");
        public final static Property Vendor_name_en = new Property(3, String.class, "vendor_name_en", false, "VENDOR_NAME_EN");
        public final static Property Vendor_name_ar = new Property(4, String.class, "vendor_name_ar", false, "VENDOR_NAME_AR");
        public final static Property Vendor_description_en = new Property(5, String.class, "vendor_description_en", false, "VENDOR_DESCRIPTION_EN");
        public final static Property Vendor_description_ar = new Property(6, String.class, "vendor_description_ar", false, "VENDOR_DESCRIPTION_AR");
        public final static Property Vendor_phone1 = new Property(7, String.class, "vendor_phone1", false, "VENDOR_PHONE1");
        public final static Property Vendor_phone2 = new Property(8, String.class, "vendor_phone2", false, "VENDOR_PHONE2");
        public final static Property Vendor_youtube_video = new Property(9, String.class, "vendor_youtube_video", false, "VENDOR_YOUTUBE_VIDEO");
        public final static Property Vendor_social_instagram = new Property(10, String.class, "vendor_social_instagram", false, "VENDOR_SOCIAL_INSTAGRAM");
        public final static Property Vendor_social_twitter = new Property(11, String.class, "vendor_social_twitter", false, "VENDOR_SOCIAL_TWITTER");
        public final static Property Vendor_location = new Property(12, String.class, "vendor_location", false, "VENDOR_LOCATION");
        public final static Property Vendor_address_text_en = new Property(13, String.class, "vendor_address_text_en", false, "VENDOR_ADDRESS_TEXT_EN");
        public final static Property Vendor_address_text_ar = new Property(14, String.class, "vendor_address_text_ar", false, "VENDOR_ADDRESS_TEXT_AR");
        public final static Property Vendor_account_start_date = new Property(15, String.class, "vendor_account_start_date", false, "VENDOR_ACCOUNT_START_DATE");
        public final static Property Vendor_account_end_date = new Property(16, String.class, "vendor_account_end_date", false, "VENDOR_ACCOUNT_END_DATE");
        public final static Property Sort_order = new Property(17, String.class, "sort_order", false, "SORT_ORDER");
    };


    public VendorDao(DaoConfig config) {
        super(config);
    }
    
    public VendorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VENDOR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VENDOR_ID' TEXT," + // 1: vendor_id
                "'VENDOR_LOGO' TEXT," + // 2: vendor_logo
                "'VENDOR_NAME_EN' TEXT," + // 3: vendor_name_en
                "'VENDOR_NAME_AR' TEXT," + // 4: vendor_name_ar
                "'VENDOR_DESCRIPTION_EN' TEXT," + // 5: vendor_description_en
                "'VENDOR_DESCRIPTION_AR' TEXT," + // 6: vendor_description_ar
                "'VENDOR_PHONE1' TEXT," + // 7: vendor_phone1
                "'VENDOR_PHONE2' TEXT," + // 8: vendor_phone2
                "'VENDOR_YOUTUBE_VIDEO' TEXT," + // 9: vendor_youtube_video
                "'VENDOR_SOCIAL_INSTAGRAM' TEXT," + // 10: vendor_social_instagram
                "'VENDOR_SOCIAL_TWITTER' TEXT," + // 11: vendor_social_twitter
                "'VENDOR_LOCATION' TEXT," + // 12: vendor_location
                "'VENDOR_ADDRESS_TEXT_EN' TEXT," + // 13: vendor_address_text_en
                "'VENDOR_ADDRESS_TEXT_AR' TEXT," + // 14: vendor_address_text_ar
                "'VENDOR_ACCOUNT_START_DATE' TEXT," + // 15: vendor_account_start_date
                "'VENDOR_ACCOUNT_END_DATE' TEXT," + // 16: vendor_account_end_date
                "'SORT_ORDER' TEXT);"); // 17: sort_order
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VENDOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Vendor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vendor_id = entity.getVendor_id();
        if (vendor_id != null) {
            stmt.bindString(2, vendor_id);
        }
 
        String vendor_logo = entity.getVendor_logo();
        if (vendor_logo != null) {
            stmt.bindString(3, vendor_logo);
        }
 
        String vendor_name_en = entity.getVendor_name_en();
        if (vendor_name_en != null) {
            stmt.bindString(4, vendor_name_en);
        }
 
        String vendor_name_ar = entity.getVendor_name_ar();
        if (vendor_name_ar != null) {
            stmt.bindString(5, vendor_name_ar);
        }
 
        String vendor_description_en = entity.getVendor_description_en();
        if (vendor_description_en != null) {
            stmt.bindString(6, vendor_description_en);
        }
 
        String vendor_description_ar = entity.getVendor_description_ar();
        if (vendor_description_ar != null) {
            stmt.bindString(7, vendor_description_ar);
        }
 
        String vendor_phone1 = entity.getVendor_phone1();
        if (vendor_phone1 != null) {
            stmt.bindString(8, vendor_phone1);
        }
 
        String vendor_phone2 = entity.getVendor_phone2();
        if (vendor_phone2 != null) {
            stmt.bindString(9, vendor_phone2);
        }
 
        String vendor_youtube_video = entity.getVendor_youtube_video();
        if (vendor_youtube_video != null) {
            stmt.bindString(10, vendor_youtube_video);
        }
 
        String vendor_social_instagram = entity.getVendor_social_instagram();
        if (vendor_social_instagram != null) {
            stmt.bindString(11, vendor_social_instagram);
        }
 
        String vendor_social_twitter = entity.getVendor_social_twitter();
        if (vendor_social_twitter != null) {
            stmt.bindString(12, vendor_social_twitter);
        }
 
        String vendor_location = entity.getVendor_location();
        if (vendor_location != null) {
            stmt.bindString(13, vendor_location);
        }
 
        String vendor_address_text_en = entity.getVendor_address_text_en();
        if (vendor_address_text_en != null) {
            stmt.bindString(14, vendor_address_text_en);
        }
 
        String vendor_address_text_ar = entity.getVendor_address_text_ar();
        if (vendor_address_text_ar != null) {
            stmt.bindString(15, vendor_address_text_ar);
        }
 
        String vendor_account_start_date = entity.getVendor_account_start_date();
        if (vendor_account_start_date != null) {
            stmt.bindString(16, vendor_account_start_date);
        }
 
        String vendor_account_end_date = entity.getVendor_account_end_date();
        if (vendor_account_end_date != null) {
            stmt.bindString(17, vendor_account_end_date);
        }
 
        String sort_order = entity.getSort_order();
        if (sort_order != null) {
            stmt.bindString(18, sort_order);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Vendor readEntity(Cursor cursor, int offset) {
        Vendor entity = new Vendor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vendor_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vendor_logo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vendor_name_en
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vendor_name_ar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // vendor_description_en
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vendor_description_ar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vendor_phone1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vendor_phone2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // vendor_youtube_video
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // vendor_social_instagram
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vendor_social_twitter
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // vendor_location
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vendor_address_text_en
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // vendor_address_text_ar
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // vendor_account_start_date
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // vendor_account_end_date
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // sort_order
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Vendor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVendor_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVendor_logo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVendor_name_en(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVendor_name_ar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVendor_description_en(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVendor_description_ar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVendor_phone1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVendor_phone2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVendor_youtube_video(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVendor_social_instagram(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVendor_social_twitter(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVendor_location(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVendor_address_text_en(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVendor_address_text_ar(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVendor_account_start_date(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVendor_account_end_date(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSort_order(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Vendor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Vendor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
